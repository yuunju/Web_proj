{"ast":null,"code":"let chart;\n\n// 엑셀 데이터 불러오기\nasync function loadData() {\n  try {\n    const response = await fetch('./data/2_data.xlsx');\n    if (!response.ok) {\n      throw new Error(`네트워크 응답에 문제가 있습니다. 상태 코드: ${response.status}`);\n    }\n    const arrayBuffer = await response.arrayBuffer();\n    const workbook = XLSX.read(arrayBuffer, {\n      type: 'array'\n    });\n\n    // 엑셀 시트에서 데이터 추출\n    const p1Data = workbook.Sheets['P1 설계변경요청'] ? XLSX.utils.sheet_to_json(workbook.Sheets['P1 설계변경요청']) : [];\n    const p2Data = workbook.Sheets['P2 설계변경요청'] ? XLSX.utils.sheet_to_json(workbook.Sheets['P2 설계변경요청']) : [];\n    const p3Data = workbook.Sheets['P3 설계변경요청'] ? XLSX.utils.sheet_to_json(workbook.Sheets['P3 설계변경요청']) : [];\n    const combinedData = [...p1Data, ...p2Data, ...p3Data];\n    combinedData.forEach(item => {\n      if (item) {\n        item['등록일'] = item['등록일'] ? new Date(item['등록일']) : null;\n        item['완료예정일'] = item['완료예정일'] ? new Date(item['완료예정일']) : null;\n        item['조치완료일'] = item['조치완료일'] ? new Date(item['조치완료일']) : null;\n      }\n    });\n    return combinedData;\n  } catch (error) {\n    console.error('Error reading Excel file:', error);\n    alert(`오류가 발생했습니다: ${error.message}`);\n  }\n}\nfunction formatChartData(data, type) {\n  switch (type) {\n    case 'urgencyImportance':\n      const urgencyCounts = data.reduce((acc, item) => {\n        const urgency = item['긴급도'] || '긴급도 없음';\n        acc[urgency] = (acc[urgency] || 0) + 1;\n        return acc;\n      }, {});\n      const importanceCounts = data.reduce((acc, item) => {\n        const importance = item['중요도'] || '중요도 없음';\n        acc[importance] = (acc[importance] || 0) + 1;\n        return acc;\n      }, {});\n\n      // 상/중/하와 High/Medium/Low를 공통 레이블로 통합\n      const labels = ['상', '중', '하', 'High', 'Medium', 'Low'];\n\n      // 각 레이블에 해당하는 데이터 정렬\n      const urgencyData = labels.map(label => urgencyCounts[label] || 0);\n      const importanceData = labels.map(label => importanceCounts[label] || 0);\n      return {\n        labels,\n        datasets: [{\n          label: '긴급도',\n          data: urgencyData,\n          backgroundColor: '#FF6384'\n        }, {\n          label: '중요도',\n          data: importanceData,\n          backgroundColor: '#36A2EB'\n        }]\n      };\n    default:\n      return [];\n  }\n}\nfunction createChart(data, type) {\n  const ctx = document.getElementById('myChart').getContext('2d');\n\n  // 기존 차트가 있다면 파괴\n  if (chart) {\n    chart.destroy();\n  }\n  if (type === 'urgencyImportance') {\n    chart = new Chart(ctx, {\n      type: 'bar',\n      data: data,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: '긴급도/중요도 차트'\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: '카테고리'\n            },\n            grid: {\n              display: false\n            },\n            ticks: {\n              autoSkip: false,\n              // 모든 레이블을 표시하도록 설정\n              maxRotation: 0,\n              // 레이블의 회전 각도 조정\n              minRotation: 0\n            },\n            barPercentage: 0.8,\n            // 바가 카테고리 전체를 차지하도록 설정\n            categoryPercentage: 0.9 // 바가 레이블의 중앙에 위치하도록 설정\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: '수량'\n            }\n          }\n        }\n      }\n    });\n  } else {\n    // 다른 차트들은 도넛형으로 설정\n    chart = new Chart(ctx, {\n      type: 'doughnut',\n      data: {\n        labels: data.map(item => item.label),\n        datasets: [{\n          label: type,\n          data: data.map(item => item.value),\n          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#C9CBCF']\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: `차트: ${type}`\n          }\n        }\n      }\n    });\n  }\n}\nasync function setActiveChart(type) {\n  const data = await loadData();\n  const formattedData = formatChartData(data, type);\n  createChart(formattedData, type);\n}\nwindow.onload = function () {\n  setActiveChart('urgencyImportance');\n};","map":{"version":3,"names":["chart","loadData","response","fetch","ok","Error","status","arrayBuffer","workbook","XLSX","read","type","p1Data","Sheets","utils","sheet_to_json","p2Data","p3Data","combinedData","forEach","item","Date","error","console","alert","message","formatChartData","data","urgencyCounts","reduce","acc","urgency","importanceCounts","importance","labels","urgencyData","map","label","importanceData","datasets","backgroundColor","createChart","ctx","document","getElementById","getContext","destroy","Chart","options","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","scales","x","grid","ticks","autoSkip","maxRotation","minRotation","barPercentage","categoryPercentage","y","beginAtZero","value","setActiveChart","formattedData","window","onload"],"sources":["C:/Users/samsung/Documents/GitHub/DT/dt/src/App.js"],"sourcesContent":["let chart;\n\n// 엑셀 데이터 불러오기\nasync function loadData() {\n    try {\n        const response = await fetch('./data/2_data.xlsx');\n        if (!response.ok) {\n            throw new Error(`네트워크 응답에 문제가 있습니다. 상태 코드: ${response.status}`);\n        }\n\n        const arrayBuffer = await response.arrayBuffer();\n        const workbook = XLSX.read(arrayBuffer, { type: 'array' });\n\n        // 엑셀 시트에서 데이터 추출\n        const p1Data = workbook.Sheets['P1 설계변경요청'] ? XLSX.utils.sheet_to_json(workbook.Sheets['P1 설계변경요청']) : [];\n        const p2Data = workbook.Sheets['P2 설계변경요청'] ? XLSX.utils.sheet_to_json(workbook.Sheets['P2 설계변경요청']) : [];\n        const p3Data = workbook.Sheets['P3 설계변경요청'] ? XLSX.utils.sheet_to_json(workbook.Sheets['P3 설계변경요청']) : [];\n        const combinedData = [...p1Data, ...p2Data, ...p3Data];\n\n        combinedData.forEach(item => {\n            if (item) {\n                item['등록일'] = item['등록일'] ? new Date(item['등록일']) : null;\n                item['완료예정일'] = item['완료예정일'] ? new Date(item['완료예정일']) : null;\n                item['조치완료일'] = item['조치완료일'] ? new Date(item['조치완료일']) : null;\n            }\n        });\n\n        return combinedData;\n    } catch (error) {\n        console.error('Error reading Excel file:', error);\n        alert(`오류가 발생했습니다: ${error.message}`);\n    }\n}\n\nfunction formatChartData(data, type) {\n    switch (type) {\n        case 'urgencyImportance':\n            const urgencyCounts = data.reduce((acc, item) => {\n                const urgency = item['긴급도'] || '긴급도 없음';\n                acc[urgency] = (acc[urgency] || 0) + 1;\n                return acc;\n            }, {});\n\n            const importanceCounts = data.reduce((acc, item) => {\n                const importance = item['중요도'] || '중요도 없음';\n                acc[importance] = (acc[importance] || 0) + 1;\n                return acc;\n            }, {});\n\n            // 상/중/하와 High/Medium/Low를 공통 레이블로 통합\n            const labels = ['상', '중', '하', 'High', 'Medium', 'Low'];\n\n            // 각 레이블에 해당하는 데이터 정렬\n            const urgencyData = labels.map(label => urgencyCounts[label] || 0);\n            const importanceData = labels.map(label => importanceCounts[label] || 0);\n\n            return {\n                labels,\n                datasets: [\n                    {\n                        label: '긴급도',\n                        data: urgencyData,\n                        backgroundColor: '#FF6384',\n                    },\n                    {\n                        label: '중요도',\n                        data: importanceData,\n                        backgroundColor: '#36A2EB',\n                    }\n                ]\n            };\n        default:\n            return [];\n    }\n}\n\nfunction createChart(data, type) {\n    const ctx = document.getElementById('myChart').getContext('2d');\n\n    // 기존 차트가 있다면 파괴\n    if (chart) {\n        chart.destroy();\n    }\n\n    if (type === 'urgencyImportance') {\n        chart = new Chart(ctx, {\n            type: 'bar',\n            data: data,\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'top',\n                    },\n                    title: {\n                        display: true,\n                        text: '긴급도/중요도 차트'\n                    }\n                },\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: '카테고리'\n                        },\n                        grid: {\n                            display: false\n                        },\n                        ticks: {\n                            autoSkip: false, // 모든 레이블을 표시하도록 설정\n                            maxRotation: 0,  // 레이블의 회전 각도 조정\n                            minRotation: 0\n                        },\n                        barPercentage: 0.8, // 바가 카테고리 전체를 차지하도록 설정\n                        categoryPercentage: 0.9 // 바가 레이블의 중앙에 위치하도록 설정\n                    },\n                    y: {\n                        beginAtZero: true,\n                        title: {\n                            display: true,\n                            text: '수량'\n                        }\n                    }\n                }\n            }\n        });\n    } else {\n        // 다른 차트들은 도넛형으로 설정\n        chart = new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: data.map(item => item.label),\n                datasets: [{\n                    label: type,\n                    data: data.map(item => item.value),\n                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#C9CBCF'],\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'top',\n                    },\n                    title: {\n                        display: true,\n                        text: `차트: ${type}`\n                    }\n                }\n            }\n        });\n    }\n}\n\nasync function setActiveChart(type) {\n    const data = await loadData();\n    const formattedData = formatChartData(data, type);\n    createChart(formattedData, type);\n}\n\nwindow.onload = function() {\n    setActiveChart('urgencyImportance');\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}